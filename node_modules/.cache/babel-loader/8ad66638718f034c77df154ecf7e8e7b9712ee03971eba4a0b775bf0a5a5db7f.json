{"ast":null,"code":"var _jsxFileName = \"/Users/annapuskina/Documents/nir/src/RingChart.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonutChart = ({\n  data\n}) => {\n  const total = data.reduce((sum, segment) => sum + segment[1], 0);\n  const radius = 100; // Радиус внешнего круга\n  const thickness = 40; // Толщина кольца\n  const center = radius + 10; // Центр диаграммы с учетом отступов\n  const circumference = 2 * Math.PI * radius;\n\n  // Вычисляем углы и проценты\n  let cumulativePercentage = 0;\n  const segments = data.map(([name, value, color, emoji], index) => {\n    const percentage = value / total * 100;\n    const startPercentage = cumulativePercentage;\n    const endPercentage = startPercentage + percentage;\n    cumulativePercentage += percentage;\n    return {\n      name,\n      value,\n      color,\n      emoji,\n      startPercentage,\n      endPercentage\n    };\n  });\n\n  // Генерация пути для каждого сегмента\n  const createSegmentPath = (startPercentage, endPercentage) => {\n    const startAngle = startPercentage / 100 * 360;\n    const endAngle = endPercentage / 100 * 360;\n    const start = {\n      x: center + radius * Math.cos((startAngle - 90) * (Math.PI / 180)),\n      y: center + radius * Math.sin((startAngle - 90) * (Math.PI / 180))\n    };\n    const end = {\n      x: center + radius * Math.cos((endAngle - 90) * (Math.PI / 180)),\n      y: center + radius * Math.sin((endAngle - 90) * (Math.PI / 180))\n    };\n    const largeArcFlag = endPercentage - startPercentage > 50 ? 1 : 0;\n    return `M ${start.x} ${start.y}\n                A ${radius} ${radius} 0 ${largeArcFlag} 1 ${end.x} ${end.y}\n                L ${center} ${center}\n                Z`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: 2 * center,\n    height: 2 * center,\n    children: [segments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n      d: createSegmentPath(segment.startPercentage, segment.endPercentage),\n      fill: segment.color,\n      stroke: \"white\",\n      strokeWidth: \"1\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)), segments.map((segment, index) => {\n      const angle = (segment.startPercentage + segment.endPercentage) / 2;\n      const radian = angle / 100 * 2 * Math.PI;\n      const x = center + (radius - thickness / 2) * Math.cos(radian);\n      const y = center + (radius - thickness / 2) * Math.sin(radian);\n      return /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x,\n        y: y,\n        fontSize: \"14\",\n        textAnchor: \"middle\",\n        alignmentBaseline: \"middle\",\n        children: segment.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this);\n    }), segments.map((segment, index) => {\n      const angle = (segment.startPercentage + segment.endPercentage) / 2;\n      const radian = angle / 100 * 2 * Math.PI;\n      const x = center + (radius + 20) * Math.cos(radian);\n      const y = center + (radius + 20) * Math.sin(radian);\n      const truncatedName = segment.name.length > 8 ? `${segment.name.slice(0, 8)}...` : segment.name;\n      const percentage = (segment.value / total * 100).toFixed(1);\n      return /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x,\n        y: y,\n        fontSize: \"12\",\n        textAnchor: \"middle\",\n        alignmentBaseline: \"middle\",\n        fill: \"#333\",\n        children: `${truncatedName} - ${percentage}%`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_c = DonutChart;\nexport default DonutChart;\nvar _c;\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DonutChart","data","total","reduce","sum","segment","radius","thickness","center","circumference","Math","PI","cumulativePercentage","segments","map","name","value","color","emoji","index","percentage","startPercentage","endPercentage","createSegmentPath","startAngle","endAngle","start","x","cos","y","sin","end","largeArcFlag","width","height","children","d","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","angle","radian","fontSize","textAnchor","alignmentBaseline","truncatedName","length","slice","toFixed","_c","$RefreshReg$"],"sources":["/Users/annapuskina/Documents/nir/src/RingChart.js"],"sourcesContent":["import React from 'react';\n\nconst DonutChart = ({ data }) => {\n    const total = data.reduce((sum, segment) => sum + segment[1], 0);\n    const radius = 100; // Радиус внешнего круга\n    const thickness = 40; // Толщина кольца\n    const center = radius + 10; // Центр диаграммы с учетом отступов\n    const circumference = 2 * Math.PI * radius;\n\n    // Вычисляем углы и проценты\n    let cumulativePercentage = 0;\n    const segments = data.map(([name, value, color, emoji], index) => {\n        const percentage = (value / total) * 100;\n        const startPercentage = cumulativePercentage;\n        const endPercentage = startPercentage + percentage;\n        cumulativePercentage += percentage;\n\n        return {\n            name,\n            value,\n            color,\n            emoji,\n            startPercentage,\n            endPercentage,\n        };\n    });\n\n    // Генерация пути для каждого сегмента\n    const createSegmentPath = (startPercentage, endPercentage) => {\n        const startAngle = (startPercentage / 100) * 360;\n        const endAngle = (endPercentage / 100) * 360;\n\n        const start = {\n            x: center + radius * Math.cos((startAngle - 90) * (Math.PI / 180)),\n            y: center + radius * Math.sin((startAngle - 90) * (Math.PI / 180)),\n        };\n        const end = {\n            x: center + radius * Math.cos((endAngle - 90) * (Math.PI / 180)),\n            y: center + radius * Math.sin((endAngle - 90) * (Math.PI / 180)),\n        };\n\n        const largeArcFlag = endPercentage - startPercentage > 50 ? 1 : 0;\n\n        return `M ${start.x} ${start.y}\n                A ${radius} ${radius} 0 ${largeArcFlag} 1 ${end.x} ${end.y}\n                L ${center} ${center}\n                Z`;\n    };\n\n    return (\n        <svg width={2 * center} height={2 * center}>\n            {/* Рисуем сегменты */}\n            {segments.map((segment, index) => (\n                <path\n                    key={index}\n                    d={createSegmentPath(segment.startPercentage, segment.endPercentage)}\n                    fill={segment.color}\n                    stroke=\"white\"\n                    strokeWidth=\"1\"\n                />\n            ))}\n\n            {/* Эмодзи */}\n            {segments.map((segment, index) => {\n                const angle = (segment.startPercentage + segment.endPercentage) / 2;\n                const radian = (angle / 100) * 2 * Math.PI;\n                const x = center + (radius - thickness / 2) * Math.cos(radian);\n                const y = center + (radius - thickness / 2) * Math.sin(radian);\n\n                return (\n                    <text\n                        key={index}\n                        x={x}\n                        y={y}\n                        fontSize=\"14\"\n                        textAnchor=\"middle\"\n                        alignmentBaseline=\"middle\"\n                    >\n                        {segment.emoji}\n                    </text>\n                );\n            })}\n\n            {/* Подписи */}\n            {segments.map((segment, index) => {\n                const angle = (segment.startPercentage + segment.endPercentage) / 2;\n                const radian = (angle / 100) * 2 * Math.PI;\n                const x = center + (radius + 20) * Math.cos(radian);\n                const y = center + (radius + 20) * Math.sin(radian);\n\n                const truncatedName =\n                    segment.name.length > 8\n                        ? `${segment.name.slice(0, 8)}...`\n                        : segment.name;\n                const percentage = ((segment.value / total) * 100).toFixed(1);\n\n                return (\n                    <text\n                        key={index}\n                        x={x}\n                        y={y}\n                        fontSize=\"12\"\n                        textAnchor=\"middle\"\n                        alignmentBaseline=\"middle\"\n                        fill=\"#333\"\n                    >\n                        {`${truncatedName} - ${percentage}%`}\n                    </text>\n                );\n            })}\n        </svg>\n    );\n};\n\nexport default DonutChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}