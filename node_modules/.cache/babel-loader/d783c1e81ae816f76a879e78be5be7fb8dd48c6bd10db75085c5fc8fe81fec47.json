{"ast":null,"code":"var _jsxFileName = \"/Users/annapuskina/Documents/nir/src/RingChart.js\";\nimport React from 'react';\nimport './RingChart.css'; // Подключаем стили\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RingChart = ({\n  data\n}) => {\n  const total = data.reduce((sum, segment) => sum + segment[1], 0);\n\n  // Вычисляем проценты и стили для каждого сегмента\n  let cumulativePercentage = 0;\n  const segments = data.map(([name, value, color, emoji], index) => {\n    const percentage = value / total * 100;\n    const startPercentage = cumulativePercentage;\n    const endPercentage = startPercentage + percentage;\n    cumulativePercentage += percentage;\n    return {\n      name,\n      value,\n      color,\n      emoji,\n      startPercentage,\n      endPercentage\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donut-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"donut-container\",\n      children: segments.map((segment, index) => {\n        const rotation = segment.startPercentage / 100 * 360;\n        const style = {\n          background: segment.color,\n          transform: `rotate(${rotation}deg)`\n        };\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"donut-segment\",\n          style: style,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"donut-emoji\",\n            style: {\n              transform: `rotate(-${rotation}deg)`\n            },\n            children: segment.emoji\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"donut-labels\",\n      children: segments.map((segment, index) => {\n        const truncatedName = segment.name.length > 8 ? `${segment.name.slice(0, 8)}...` : segment.name;\n        const percentage = (segment.value / total * 100).toFixed(1);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"donut-label\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [truncatedName, \" - \", percentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_c = RingChart;\nexport default RingChart;\nvar _c;\n$RefreshReg$(_c, \"RingChart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RingChart","data","total","reduce","sum","segment","cumulativePercentage","segments","map","name","value","color","emoji","index","percentage","startPercentage","endPercentage","className","children","rotation","style","background","transform","fileName","_jsxFileName","lineNumber","columnNumber","truncatedName","length","slice","toFixed","_c","$RefreshReg$"],"sources":["/Users/annapuskina/Documents/nir/src/RingChart.js"],"sourcesContent":["import React from 'react';\nimport './RingChart.css'; // Подключаем стили\n\nconst RingChart = ({ data }) => {\n    const total = data.reduce((sum, segment) => sum + segment[1], 0);\n\n    // Вычисляем проценты и стили для каждого сегмента\n    let cumulativePercentage = 0;\n    const segments = data.map(([name, value, color, emoji], index) => {\n        const percentage = (value / total) * 100;\n        const startPercentage = cumulativePercentage;\n        const endPercentage = startPercentage + percentage;\n        cumulativePercentage += percentage;\n\n        return {\n            name,\n            value,\n            color,\n            emoji,\n            startPercentage,\n            endPercentage,\n        };\n    });\n\n    return (\n        <div className=\"donut-chart\">\n            <div className=\"donut-container\">\n                {segments.map((segment, index) => {\n                    const rotation = (segment.startPercentage / 100) * 360;\n                    const style = {\n                        background: segment.color,\n                        transform: `rotate(${rotation}deg)`,\n                    };\n\n                    return (\n                        <div\n                            key={index}\n                            className=\"donut-segment\"\n                            style={style}\n                        >\n                            <div className=\"donut-emoji\" style={{ transform: `rotate(-${rotation}deg)` }}>\n                                {segment.emoji}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n\n            <div className=\"donut-labels\">\n                {segments.map((segment, index) => {\n                    const truncatedName =\n                        segment.name.length > 8\n                            ? `${segment.name.slice(0, 8)}...`\n                            : segment.name;\n                    const percentage = ((segment.value / total) * 100).toFixed(1);\n\n                    return (\n                        <div key={index} className=\"donut-label\">\n                            <span>{truncatedName} - {percentage}%</span>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default RingChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}